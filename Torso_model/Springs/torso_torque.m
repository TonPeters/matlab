function [F_leg,F_trunk] = torso_torque(q0,q2,m_4,M_4,N_leg,F1_leg,N_trunk,F1_trunk)
% TRUNK_TORQUE, determine the required torque by the trunk based on the 
%   model of the trunk. Inputs are
%   (q0,q2,m_4,N_leg,F1_leg,N_trunk,F1_trunk):
%   -   q0, joint angle 0 (ankle)
%   -   q2, joint angle 2 (hip)
%   -   m_4, mass of the arms
%   -   M_4, moment generated by the arms
%   -   N_leg, number of springs in leg
%   -   F1_leg, load of springs in leg
%   -   N_trunk, number of springs in trunk
%   -   F1_trunk, load of springs in trunk

    %% calculate the spring loads
    B_leg  = 404e-3+2*30e-3;
    A_leg  = 175e-3;
    % F1_leg = 500;
    X_leg  = 1.35;
    F2_leg = F1_leg*X_leg;
    K_leg  = (F2_leg-F1_leg)/(A_leg-10e-3);
    FR_leg = 60;
    L0_leg = B_leg  + (F1_leg)/K_leg;

    B_trunk  = 404e-3+2*30e-3;  % complete extended length m
    A_trunk  = 175e-3;          % spring motion range m
    % F1_trunk = 800;             % force min length
    X_trunk  = 1.35;            % f2/f1
    F2_trunk = F1_trunk*X_trunk;% force min length
    K_trunk  = (F2_trunk-F1_trunk)/(A_trunk-10e-3); % spring constant (slope N/m)
    FR_trunk = 60;              % direction dependant force
    L0_trunk = B_trunk  + (F1_trunk)/K_trunk; % length at zero energy m (not reachable)
    
    %% gravity contribution
    g_leg = g.*(cos(q0).*(P1+l_1*m_4)+...             
        (dq1_dq0-1).*cos(q1-q0).*(P2+l_2*m_4)+...     
        (1-dq1_dq0).*cos(q2-q1+q0+q2_gravity_offset).*(P3+l_3*m_4));
    g_trunk = g*(P3+m_4.*l_3).*cos(q2-q1+q0+q2_gravity_offset);

    % Moment of the arms
    g_arms_trunk = M_4;
    g_arms_leg = M_4*(1-dq1_dq0);
    
    
    %% spring contribution
    % gas spring force
    lspr1 = angle0_to_spring1(q0);                                  % length spring leg
    dlspr1_dq = sym_partial_derivative(angle0_to_spring1(qs0),qs0);
    dlspr1_dq_num = double(subs(dlspr1_dq,qs0,q0));
    gs_leg = -N_leg*K_leg.*(L0_leg-lspr1).*dlspr1_dq_num;            % force gas spring leg
    dlspr2_dq = sym_partial_derivative(angle2_to_spring2(qs2),qs2);
    dlspr2_dq_num = double(subs(dlspr2_dq,qs2,q2));
    lspr2 = angle2_to_spring2(q2);                                  % length spring trunk
    gs_trunk = -N_trunk*K_trunk.*(L0_trunk-lspr2).*dlspr2_dq_num;   % force gas spring trunk

    % direction dependant gas spring force
    thFgs1 = spring1_to_Fangle1(lspr1);
    F_gs1 = -N_leg.*FR_leg*sin(thFgs1).*l_Fgs1;
    thFgs2 = spring2_to_Fangle2(lspr2);
    F_gs2 = -N_trunk.*FR_trunk*sin(thFgs2).*l_Fgs2;

    %% potential contribution
    % continuous
    G_leg = g_leg+gs_leg+g_arms_leg;
    G_trunk = g_trunk+gs_trunk+g_arms_trunk;
    
    % direction dependant contribution
    G_leg(:,:,2) = G_leg(:,:,2)+F_gs1(:,:,2);
    G_trunk(:,:,2) = G_trunk(:,:,2)+F_gs2(:,:,2);
    
    % motor torques by potential
    tau_G_leg = G_leg./(l_F1.*sin(th_F1).*(r_sp*r_gear1));
    tau_G_trunk = G_trunk./(l_F2.*sin(th_F2).*(r_sp*r_gear2));
    
    %% friction contributions
    tau_fric_pr_leg = tau_G_leg.*sign(dq.*tau_G_leg)*Kls_1;
    tau_fric_leg = tau_fric_pr_leg+sign(dq).*Kc_1+Kd_1;
    tau_fric_trunk = sign(dq).*Kc_2+Kd_2;
    
    %% inertia contributions
    load Inertia_arms_20kg.mat
    
    % inertia by arm mass.
    if m_4~=0
        D_m4_leg = D_m4*[qdd;0];
        tau_D_arms_leg = double(subs(D_m4_leg(1),{'q0','q2'},{q0,q2}));
        tau_D_arms_leg(:,:,2) = -tau_D_arms_leg(:,:,2);
        D_m4_trunk = D_m4*[0;qdd];
        tau_D_arms_trunk = double(subs(D_m4_trunk(2),{'q0','q2'},{q0,q2}));
        tau_D_arms_trunk(:,:,2) = -tau_D_arms_trunk(:,:,2);
        if m_4==10
            tau_D_arms_leg = tau_D_arms_leg./2;
            tau_D_arms_trunk = tau_D_arms_trunk./2;
        else
            assert(m_4==10,'wrong arm mass m_4, should be 0, 10 or 20');
        end
    end

    % inertia contribution by torso mechanism
    D_m123_leg = D_torso*[qdd;0];
    tau_D_leg = double(subs(D_m123_leg(1),{'q0','q2'},{q0,q2}));
    tau_D_leg(:,:,2) = -tau_D_leg(:,:,2);
    D_m123_trunk = D_torso*[0;qdd];
    tau_D_trunk = double(subs(D_m123_trunk(2),{'q0','q2'},{q0,q2}));
    tau_D_trunk(:,:,2) = -tau_D_trunk(:,:,2);

    %% motor torques
    tau_leg = (tau_fric_leg+tau_G_leg+tau_D_arms_leg+tau_D_leg);
    tau_trunk = (tau_fric_trunk+tau_G_trunk+tau_D_arms_trunk+tau_D_trunk);
    
    F_leg = tau_leg.*(r_sp*r_gear1);
    F_trunk = tau_trunk.*(r_sp*r_gear2);
    
end
    
    
    
    